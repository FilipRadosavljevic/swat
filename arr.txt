public class Niz {

	int[] niz;
	int brEl;
	
	public Niz(int kapacitet) {
		
		niz = new int [kapacitet];
		
	}
	
	void ubaciNaKraj (int noviBroj) {
		if(niz.length == brEl) {
			System.out.println("Niz je pun");
			return;
		}
		niz[brEl++] = noviBroj;
	}
	
	void ubaciNaKraj (int...nekiNiz) {
		for (int i = 0; i < nekiNiz.length; i++) {
			ubaciNaKraj(nekiNiz[i]);
		}
	}
	
	void printNiz() {
		
		if(brEl == 0) {
			System.out.println("Niz je prazan");
			return;
		}
		
		System.out.println("Niz je: ");
		
		for (int i = 0; i < brEl; i++) {
			System.out.println(niz[i] + " ");
		}
		System.out.println();
	}
	
	int maxNiza() {

		if(brEl == 0)
			throw new RuntimeException("Niz je prazan");
		
		int max = niz[0];
		
		for (int i = 0; i < brEl; i++) {
			if(niz[i] > max)
				max = niz[i];
		}
		
		return max;
	}

	int maxNegativanElement() {
		
		int max = Integer.MIN_VALUE;
		boolean uspesno = false;
		
		for (int i = 0; i < brEl; i++) {
			if(niz[i] < 0 && niz[i] > max) {
				max = niz[i];
				uspesno = true; // da nam ne bi vratio MIN_VALUE ako niz nema negativne brojeve
			}
		}
		
		if(uspesno)
			return max;
		else
			throw new RuntimeException("NE POSTOJI NI JEDAN NEGATIVAN EL");
	}

	void ubaciNaPocetak(int broj) {
		
		if(brEl == niz.length) {
			System.out.println("NIZ JE PUN");
			return;
		}
		
		for (int i = brEl; i > 0; i--) {
			niz[i] = niz[i-1];
		}
		
		niz[0] = broj;
		brEl++;
	}

	void ubaciNaIndex(int broj, int index) {
		
		if(index < 0 || index > brEl) {
			throw new RuntimeException("INDEKS NIJE DOBAR");
		}
		
		if(brEl == niz.length) {
			System.out.println("NIZ JE PUN");
			return;
		}
		
		
		for (int i = brEl; i > index; i --) {
			niz[i] = niz[i-1];
		}
		
		niz[index] = broj;
		brEl++;
		
	}
	
	void ubaciSortirano(int noviBr) {
		
		if(brEl == niz.length) {
			System.out.println("PUN NIZ");
			return;
		}
		
		for (int i = 0; i < brEl; i++) {
			if(niz[i] > noviBr) {
				ubaciNaIndex(noviBr, i);
				return;
			}
		}
		niz[brEl++] = noviBr;
	}
	
	void sortiraj() {
		
		for (int i = 0; i < brEl - 1; i++) {
			for (int j = i+1; j < brEl; j++) {
				if(niz[i] > niz[j]) {
					int c = niz[i];
					niz[i] = niz[j];
					niz[j] = c;
				}
			}
		}
		
	}
	
	int frekvencija(int broj) {
		int brojac = 0;
		
		for (int i = 0; i < brEl; i++) {
			if(niz[i] == broj) {
				brojac++;
			}
		}
		
		return brojac;
	}

	static int frekvencija(int broj, int[] niz) {
		int brojac = 0;
		
		for (int i = 0; i < niz.length; i++) {
			if(niz[i] == broj) {
				brojac++;
			}
		}
		
		return brojac;
	}

	void unija(int[] niz1, int[] niz2) {
		
		niz = new int[niz1.length + niz2.length]; // ovo je niz sa pocetka
		brEl = 0;
		
		for (int i = 0; i < niz1.length; i++) {
			if(frekvencija(niz1[i]) == 0)
				niz[brEl++] = niz1[i];
		}
		
		for (int i = 0; i < niz2.length; i++) {
			if(frekvencija(niz2[i], niz) == 0)
				niz[brEl++] = niz2[i];
		}
		
	}

	void spojiDvaRastuca(int[] niz1, int[] niz2) {
		
		niz = new int[niz1.length + niz2.length];
		brEl = 0;
		
		int brojac1 = 0;
		int brojac2 = 0;
		
		while( !(brojac1 == niz1.length && brojac2 == niz2.length) ) {
			
			if(brojac1 == niz1.length) {
				niz[brEl++] = niz2[brojac2];
				brojac2++;
				continue;
			}
			
			if(brojac2 == niz1.length) {
				niz[brEl++] = niz1[brojac1];
				brojac1++;
				continue;
			}
			
			if(niz1[brojac1] < niz2[brojac2]) {
				niz[brEl++] = niz1[brojac1];
				brojac1++;
			} else {
				niz[brEl++] = niz2[brojac2];
				brojac2++;
			}
		}
		
	}
	
	int zbirTriMaxa() {
		int max1 = Integer.MIN_VALUE;
		int max2 = Integer.MIN_VALUE;
		int max3 = Integer.MIN_VALUE;
		
		int indexMax1 = -1;
		int indexMax2 = -1;
		
		if(brEl < 3) {
			throw new RuntimeException("NIZ IMA MANJE OD TRI ELEM.");
		}
		
		for (int i = 0; i < brEl; i++) {
			if(niz[i] > max1) {
				max1 = niz[i];
				indexMax1 = i;
			}
		}
		
		for (int i = 0; i < brEl; i++) {
			if(niz[i] > max2 && i != indexMax1) {
				max2 = niz[i];
				indexMax2 = i;
			}
		}
		
		for (int i = 0; i < brEl; i++) {
			if(niz[i] > max3 && i != indexMax1 && i !=indexMax2) {
				max3 = niz[i];
			}
		}
		
		return max1 + max2 + max3;
	}

	int zbirTriMaxa2() {
		int max1 = Integer.MIN_VALUE;
		int max2 = Integer.MIN_VALUE;
		int max3 = Integer.MIN_VALUE;
		
		if(brEl < 3) {
			throw new RuntimeException("NIZ IMA MANJE OD TRI ELEM.");
		}
		
		for (int i = 0; i < brEl; i++) {
			if(niz[i] >= max1) {
				max3 = max2;
				max2 = max1;
				max1 = niz[i];
			}
			else if (niz[i] >= max2) {
				max3 = max2;
				max2 = niz[i];
			}
			else if (niz[i] >= max3) {
				max3 = niz[i];
			}
		}
		
		return max1 + max2 + max3;
	}
}